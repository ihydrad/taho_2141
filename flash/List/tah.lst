
AVRASM ver. 2.1.30  C:\Documents and Settings\Admin\Рабочий стол\Тахометр\flash\List\tah.asm Sun Sep 28 15:19:09 2014

C:\Documents and Settings\Admin\Рабочий стол\Тахометр\flash\List\tah.asm(991): warning: Register r3 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\Тахометр\flash\List\tah.asm(992): warning: Register r2 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATtiny2313
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : No
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _led_l=R3
                 	.DEF _led_h=R2
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c027      	RJMP __RESET
000001 c164      	RJMP _int0
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c1d4      	RJMP _timer0_OVF
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x3:
000013 596b
000014 f1fb      	.DB  0x6B,0x59,0xFB,0xF1
                 _0x4:
000015 0cbd
000016 aeba
000017 a70f
000018 2cb7      	.DB  0xBD,0xC,0xBA,0xAE,0xF,0xA7,0xB7,0x2C
000019 afbf
00001a 0200
00001b 93a7
00001c 3bbd      	.DB  0xBF,0xAF,0x0,0x2,0xA7,0x93,0xBD,0x3B
                 _0x5:
00001d 0200
00001e 1303
00001f 1f1b
C:\Documents and Settings\Admin\Рабочий стол\Тахометр\flash\List\tah.asm(1032): warning: .cseg .db misalignment - padding zero byte
000020 009f      	.DB  0x0,0x2,0x3,0x13,0x1B,0x1F,0x9F
                 
                 __GLOBAL_INI_TBL:
000021 0010      	.DW  0x10
000022 0080      	.DW  _ch
000023 002a      	.DW  _0x4*2
                 
000024 0007      	.DW  0x07
000025 0090      	.DW  _leds
000026 003a      	.DW  _0x5*2
                 
                 _0xFFFFFFFF:
000027 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000028 94f8      	CLI
000029 27ee      	CLR  R30
00002a bbec      	OUT  EECR,R30
00002b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002c e1f8      	LDI  R31,0x18
00002d 95a8      	WDR
00002e b7a4      	IN   R26,MCUSR
00002f 7fa7      	CBR  R26,8
000030 bfa4      	OUT  MCUSR,R26
000031 bdf1      	OUT  WDTCR,R31
000032 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000038 e880      	LDI  R24,__CLEAR_SRAM_SIZE
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004f e0e0      	LDI  R30,__GPIOR0_INIT
000050 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000051 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000052 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000056 c0d5      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define START_TIMER           TCCR1B=0x02
                 ;#define STOP_TIMER            TCCR1B=0x00
                 ;#define TIMER                 (TCNT1L+(TCNT1H<<8))
                 ;#define CLR_TIMER_RPM         TCNT1H=0;TCNT1L=0
                 ;#define NO_PULSE              60000
                 ;
                 ;#define CHR_PORT              PORTB
                 ;#define NUM_PORT              PORTD
                 ;#define ALL_NUM               0xCC
                 ;#define LED_LOW               6
                 ;#define LED_HI                3
                 ;#define NUM_1                 5
                 ;#define NUM_2                 1
                 ;#define NUM_3                 0
                 ;#define NUM_4                 4
                 ;#define SBI(BYTE,BIT)         BYTE|=(1<<BIT)
                 ;#define CBI(BYTE,BIT)         BYTE&=~(1<<BIT)
                 ;#define LED_delay             200
                 ;
                 ;bit
                 ;start,
                 ;process,
                 ;refresh;
                 ;
                 ;#pragma used+
                 ;//__eeprom unsigned char
                 ;unsigned char
                 ;stop[4]={
                 ;         0x6B,
                 ;         0x59,
                 ;         0xFB,
                 ;         0xF1
                 ;         },
                 
                 	.DSEG
                 ;ch[16] = {
                 ;        0xBD,     //0
                 ;        0x0C,     //1
                 ;        0xBA,     //2
                 ;        0xAE,     //3
                 ;        0x0F,     //4
                 ;        0xA7,     //5
                 ;        0xB7,     //6
                 ;        0x2C,     //7
                 ;        0xBF,     //8
                 ;        0xAF,     //9
                 ;        0x00,     //blank
                 ;        0x02,     //-
                 ;        0xA7,     // S    12
                 ;        0x93,     // T    13
                 ;        0xBD,     // O    14
                 ;        0x3B      // P    15
                 ;                },
                 ;leds[7]={
                 ;         0x00,    //0 - leds
                 ;         0x02,    //1 - led
                 ;         0x03,    //2 - leds
                 ;         0x13,    //3 - leds
                 ;         0x1B,    //4 - leds
                 ;         0x1F,    //5 - leds
                 ;         0x9F,    //6 - leds
                 ;         };
                 ;#pragma used-
                 ;
                 ;unsigned char
                 ;number[4],
                 ;led_l,
                 ;led_h;
                 ;
                 ;long
                 ;data;
                 ;
                 ;void initdev()
                 ; 0000 004B {
                 
                 	.CSEG
                 _initdev:
                 ; .FSTART _initdev
                 ; 0000 004C  DDRB=0xFF;
000057 efef      	LDI  R30,LOW(255)
000058 bbe7      	OUT  0x17,R30
                 ; 0000 004D  DDRD=0xFB;
000059 efeb      	LDI  R30,LOW(251)
00005a bbe1      	OUT  0x11,R30
                 ; 0000 004E 
                 ; 0000 004F  PORTB=0x00;
00005b e0e0      	LDI  R30,LOW(0)
00005c bbe8      	OUT  0x18,R30
                 ; 0000 0050  PORTD=0x04;
00005d e0e4      	LDI  R30,LOW(4)
00005e bbe2      	OUT  0x12,R30
                 ; 0000 0051 
                 ; 0000 0052  MCUCR=0x02;
00005f e0e2      	LDI  R30,LOW(2)
000060 bfe5      	OUT  0x35,R30
                 ; 0000 0053  GIMSK=0x40;
000061 e4e0      	LDI  R30,LOW(64)
000062 bfeb      	OUT  0x3B,R30
                 ; 0000 0054 
                 ; 0000 0055  TCCR0B=0x01;
000063 e0e1      	LDI  R30,LOW(1)
000064 bfe3      	OUT  0x33,R30
                 ; 0000 0056  TIMSK=0x02;
000065 e0e2      	LDI  R30,LOW(2)
000066 bfe9      	OUT  0x39,R30
                 ; 0000 0057  TCCR1B=0x02;
000067 bdee      	OUT  0x2E,R30
                 ; 0000 0058 }
000068 9508      	RET
                 ; .FEND
                 ;
                 ;void RefreshDisplay()
                 ; 0000 005B {
                 _RefreshDisplay:
                 ; .FSTART _RefreshDisplay
                 ; 0000 005C  CHR_PORT=leds[led_l];
000069 e9a0      	LDI  R26,LOW(_leds)
00006a 0da3      	ADD  R26,R3
00006b 91ec      	LD   R30,X
00006c bbe8      	OUT  0x18,R30
                 ; 0000 005D  CBI(NUM_PORT,LED_LOW);
00006d 9896      	CBI  0x12,6
                 ; 0000 005E  delay_us(LED_delay);
00006e d18e      	RCALL SUBOPT_0x0
                 ; 0000 005F  SBI(NUM_PORT,LED_LOW);
00006f 9a96      	SBI  0x12,6
                 ; 0000 0060 
                 ; 0000 0061  CHR_PORT=leds[led_h];
000070 e9a0      	LDI  R26,LOW(_leds)
000071 0da2      	ADD  R26,R2
000072 91ec      	LD   R30,X
000073 bbe8      	OUT  0x18,R30
                 ; 0000 0062  CBI(NUM_PORT,LED_HI);
000074 9893      	CBI  0x12,3
                 ; 0000 0063  delay_us(LED_delay);
000075 d187      	RCALL SUBOPT_0x0
                 ; 0000 0064  SBI(NUM_PORT,LED_HI);
000076 9a93      	SBI  0x12,3
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067  CHR_PORT=ch[number[0]];
000077 91e0 0097 	LDS  R30,_number
000079 d188      	RCALL SUBOPT_0x1
                 ; 0000 0068  CBI(NUM_PORT,NUM_1);
00007a 9895      	CBI  0x12,5
                 ; 0000 0069  delay_us(LED_delay);
00007b d181      	RCALL SUBOPT_0x0
                 ; 0000 006A  SBI(NUM_PORT,NUM_1);
00007c 9a95      	SBI  0x12,5
                 ; 0000 006B 
                 ; 0000 006C  CHR_PORT=ch[number[1]];
                +
00007d 91e0 0098+LDS R30 , _number + ( 1 )
                 	__GETB1MN _number,1
00007f d182      	RCALL SUBOPT_0x1
                 ; 0000 006D  CBI(NUM_PORT,NUM_2);
000080 9891      	CBI  0x12,1
                 ; 0000 006E  delay_us(LED_delay);
000081 d17b      	RCALL SUBOPT_0x0
                 ; 0000 006F  SBI(NUM_PORT,NUM_2);
000082 9a91      	SBI  0x12,1
                 ; 0000 0070 
                 ; 0000 0071  CHR_PORT=ch[number[2]];
                +
000083 91e0 0099+LDS R30 , _number + ( 2 )
                 	__GETB1MN _number,2
000085 d17c      	RCALL SUBOPT_0x1
                 ; 0000 0072  CBI(NUM_PORT,NUM_3);
000086 9890      	CBI  0x12,0
                 ; 0000 0073  delay_us(LED_delay);
000087 d175      	RCALL SUBOPT_0x0
                 ; 0000 0074  SBI(NUM_PORT,NUM_3);
000088 9a90      	SBI  0x12,0
                 ; 0000 0075 
                 ; 0000 0076  CHR_PORT=ch[number[3]];
                +
000089 91e0 009a+LDS R30 , _number + ( 3 )
                 	__GETB1MN _number,3
00008b d176      	RCALL SUBOPT_0x1
                 ; 0000 0077  CBI(NUM_PORT,NUM_4);
00008c 9894      	CBI  0x12,4
                 ; 0000 0078  delay_us(LED_delay);
00008d d16f      	RCALL SUBOPT_0x0
                 ; 0000 0079  SBI(NUM_PORT,NUM_4);
00008e 9a94      	SBI  0x12,4
                 ; 0000 007A }
00008f 9508      	RET
                 ; .FEND
                 ;
                 ;int  conv(unsigned int len_imp)
                 ; 0000 007D {
                 _conv:
                 ; .FSTART _conv
                 ; 0000 007E  float f;
                 ; 0000 007F  int tmp;
                 ; 0000 0080 
                 ; 0000 0081  if(len_imp==0) return 0;
000090 93ba      	ST   -Y,R27
000091 93aa      	ST   -Y,R26
000092 9724      	SBIW R28,4
000093 d348      	RCALL __SAVELOCR2
                 ;	len_imp -> Y+6
                 ;	f -> Y+2
                 ;	tmp -> R16,R17
000094 81ee      	LDD  R30,Y+6
000095 81ff      	LDD  R31,Y+6+1
000096 9730      	SBIW R30,0
000097 f419      	BRNE _0x6
000098 e0e0      	LDI  R30,LOW(0)
000099 e0f0      	LDI  R31,HIGH(0)
00009a c023      	RJMP _0x2000001
                 ; 0000 0082  f=((float)1000000)/len_imp;
                 _0x6:
00009b 81ee      	LDD  R30,Y+6
00009c 81ff      	LDD  R31,Y+6+1
00009d 2766      	CLR  R22
00009e 2777      	CLR  R23
00009f d1f8      	RCALL __CDF1
                +
0000a0 e0a0     +LDI R26 , LOW ( 0x49742400 )
0000a1 e2b4     +LDI R27 , HIGH ( 0x49742400 )
0000a2 e784     +LDI R24 , BYTE3 ( 0x49742400 )
0000a3 e499     +LDI R25 , BYTE4 ( 0x49742400 )
                 	__GETD2N 0x49742400
0000a4 d161      	RCALL SUBOPT_0x2
                 ; 0000 0083  f/=2;
                +
0000a5 e0e0     +LDI R30 , LOW ( 0x40000000 )
0000a6 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0000a7 e060     +LDI R22 , BYTE3 ( 0x40000000 )
0000a8 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0000a9 d15c      	RCALL SUBOPT_0x2
                 ; 0000 0084  f*=60;
                +
0000aa e0e0     +LDI R30 , LOW ( 0x42700000 )
0000ab e0f0     +LDI R31 , HIGH ( 0x42700000 )
0000ac e760     +LDI R22 , BYTE3 ( 0x42700000 )
0000ad e472     +LDI R23 , BYTE4 ( 0x42700000 )
                 	__GETD1N 0x42700000
0000ae d217      	RCALL __MULF12
                +
0000af 83ea     +STD Y + 2 , R30
0000b0 83fb     +STD Y + 2 + 1 , R31
0000b1 836c     +STD Y + 2 + 2 , R22
0000b2 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0085  tmp=f;
0000b3 d1ad      	RCALL __CFD1
0000b4 018f      	MOVW R16,R30
                 ; 0000 0086  tmp/=50;
0000b5 01d8      	MOVW R26,R16
0000b6 e3e2      	LDI  R30,LOW(50)
0000b7 e0f0      	LDI  R31,HIGH(50)
0000b8 d2ce      	RCALL __DIVW21
0000b9 018f      	MOVW R16,R30
                 ; 0000 0087  tmp*=50;
0000ba e3a2      	LDI  R26,LOW(50)
0000bb e0b0      	LDI  R27,HIGH(50)
0000bc d2b2      	RCALL __MULW12
0000bd 018f      	MOVW R16,R30
                 ; 0000 0088  return tmp;
                 _0x2000001:
0000be d322      	RCALL __LOADLOCR2
0000bf 9628      	ADIW R28,8
0000c0 9508      	RET
                 ; 0000 0089 }
                 ; .FEND
                 ;
                 ;void PrepareData(unsigned int rpm)
                 ; 0000 008C {
                 _PrepareData:
                 ; .FSTART _PrepareData
                 ; 0000 008D  unsigned int r=0;
                 ; 0000 008E  unsigned char i=0;
                 ; 0000 008F 
                 ; 0000 0090       if(rpm>6000)
0000c1 93ba      	ST   -Y,R27
0000c2 93aa      	ST   -Y,R26
0000c3 d316      	RCALL __SAVELOCR4
                 ;	rpm -> Y+4
                 ;	r -> R16,R17
                 ;	i -> R19
                +
0000c4 e000     +LDI R16 , LOW ( 0 )
0000c5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000c6 e030      	LDI  R19,0
0000c7 d148      	RCALL SUBOPT_0x3
0000c8 37a1      	CPI  R26,LOW(0x1771)
0000c9 e1e7      	LDI  R30,HIGH(0x1771)
0000ca 07be      	CPC  R27,R30
0000cb f020      	BRLO _0x7
                 ; 0000 0091         {
                 ; 0000 0092          rpm=5999;
0000cc e6ef      	LDI  R30,LOW(5999)
0000cd e1f7      	LDI  R31,HIGH(5999)
0000ce 83ec      	STD  Y+4,R30
0000cf 83fd      	STD  Y+4+1,R31
                 ; 0000 0093          }
                 ; 0000 0094  r=rpm;
                 _0x7:
                +
0000d0 810c     +LDD R16 , Y + 4
0000d1 811d     +LDD R17 , Y + 4 + 1
                 	__GETWRS 16,17,4
                 ; 0000 0095 
                 ; 0000 0096       if(rpm>3000)
0000d2 d13d      	RCALL SUBOPT_0x3
0000d3 3ba9      	CPI  R26,LOW(0xBB9)
0000d4 e0eb      	LDI  R30,HIGH(0xBB9)
0000d5 07be      	CPC  R27,R30
0000d6 f030      	BRLO _0x8
                 ; 0000 0097          {
                 ; 0000 0098           led_l=6;
0000d7 e0e6      	LDI  R30,LOW(6)
0000d8 2e3e      	MOV  R3,R30
                 ; 0000 0099           led_h=(rpm/500)-6;
0000d9 d139      	RCALL SUBOPT_0x4
0000da 50e6      	SUBI R30,LOW(6)
0000db 2e2e      	MOV  R2,R30
                 ; 0000 009A             }
                 ; 0000 009B       else
0000dc c003      	RJMP _0x9
                 _0x8:
                 ; 0000 009C           {
                 ; 0000 009D            led_l=rpm/500;
0000dd d135      	RCALL SUBOPT_0x4
0000de 2e3e      	MOV  R3,R30
                 ; 0000 009E            led_h=0;
0000df 2422      	CLR  R2
                 ; 0000 009F             }
                 _0x9:
                 ; 0000 00A0 
                 ; 0000 00A1 
                 ; 0000 00A2       for(i=0; i<4; i++)
0000e0 e030      	LDI  R19,LOW(0)
                 _0xB:
0000e1 3034      	CPI  R19,4
0000e2 f490      	BRSH _0xC
                 ; 0000 00A3       {
                 ; 0000 00A4        number[3-i]=rpm%10;
0000e3 e0e3      	LDI  R30,LOW(3)
0000e4 1be3      	SUB  R30,R19
0000e5 56e9      	SUBI R30,-LOW(_number)
0000e6 2f2e      	MOV  R18,R30
0000e7 d128      	RCALL SUBOPT_0x3
0000e8 e0ea      	LDI  R30,LOW(10)
0000e9 e0f0      	LDI  R31,HIGH(10)
0000ea d2cb      	RCALL __MODW21U
0000eb 2fa2      	MOV  R26,R18
0000ec 93ec      	ST   X,R30
                 ; 0000 00A5        rpm/=10;
0000ed d122      	RCALL SUBOPT_0x3
0000ee e0ea      	LDI  R30,LOW(10)
0000ef e0f0      	LDI  R31,HIGH(10)
0000f0 d283      	RCALL __DIVW21U
0000f1 83ec      	STD  Y+4,R30
0000f2 83fd      	STD  Y+4+1,R31
                 ; 0000 00A6       }
0000f3 5f3f      	SUBI R19,-1
0000f4 cfec      	RJMP _0xB
                 _0xC:
                 ; 0000 00A7 
                 ; 0000 00A8       //Пустые символы
                 ; 0000 00A9       if(r<10)
                +
0000f5 300a     +CPI R16 , LOW ( 10 )
0000f6 e0e0     +LDI R30 , HIGH ( 10 )
0000f7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000f8 f428      	BRSH _0xD
                 ; 0000 00AA       {
                 ; 0000 00AB        number[0]=10;
0000f9 d11e      	RCALL SUBOPT_0x5
                 ; 0000 00AC        number[1]=10;
                 ; 0000 00AD        number[2]=10;
0000fa e0ea      	LDI  R30,LOW(10)
                +
0000fb 93e0 0099+STS _number + ( 2 ) , R30
                 	__PUTB1MN _number,2
                 ; 0000 00AE        goto exit;
0000fd c019      	RJMP _0xE
                 ; 0000 00AF       }
                 ; 0000 00B0 
                 ; 0000 00B1       if((r>=10)&(r<100))
                 _0xD:
0000fe 01d8      	MOVW R26,R16
0000ff e0ea      	LDI  R30,LOW(10)
000100 e0f0      	LDI  R31,HIGH(10)
000101 d251      	RCALL __GEW12U
000102 2e0e      	MOV  R0,R30
000103 e6e4      	LDI  R30,LOW(100)
000104 e0f0      	LDI  R31,HIGH(100)
000105 d253      	RCALL __LTW12U
000106 21e0      	AND  R30,R0
000107 f011      	BREQ _0xF
                 ; 0000 00B2       {
                 ; 0000 00B3        number[0]=10;
000108 d10f      	RCALL SUBOPT_0x5
                 ; 0000 00B4        number[1]=10;
                 ; 0000 00B5        goto exit;
000109 c00d      	RJMP _0xE
                 ; 0000 00B6       }
                 ; 0000 00B7 
                 ; 0000 00B8       if((r>=100)&(r<1000))
                 _0xF:
00010a 01d8      	MOVW R26,R16
00010b e6e4      	LDI  R30,LOW(100)
00010c e0f0      	LDI  R31,HIGH(100)
00010d d245      	RCALL __GEW12U
00010e 2e0e      	MOV  R0,R30
00010f eee8      	LDI  R30,LOW(1000)
000110 e0f3      	LDI  R31,HIGH(1000)
000111 d247      	RCALL __LTW12U
000112 21e0      	AND  R30,R0
000113 f019      	BREQ _0x10
                 ; 0000 00B9       {
                 ; 0000 00BA        number[0]=10;
000114 e0ea      	LDI  R30,LOW(10)
000115 93e0 0097 	STS  _number,R30
                 ; 0000 00BB        goto exit;
                 ; 0000 00BC       }
                 ; 0000 00BD       exit:
                 _0x10:
                 _0xE:
                 ; 0000 00BE }
000117 d2c7      	RCALL __LOADLOCR4
000118 9626      	ADIW R28,6
000119 9508      	RET
                 ; .FEND
                 ;
                 ;void chk_OVF_T1()
                 ; 0000 00C1 {
                 _chk_OVF_T1:
                 ; .FSTART _chk_OVF_T1
                 ; 0000 00C2      if(TIFR&0x80)
00011a b7e8      	IN   R30,0x38
00011b ffe7      	SBRS R30,7
00011c c005      	RJMP _0x11
                 ; 0000 00C3         {
                 ; 0000 00C4          start=0;
00011d 9898      	CBI  0x13,0
                 ; 0000 00C5          process=0;
00011e 9899      	CBI  0x13,1
                 ; 0000 00C6          SBI(TIFR,TOV1);
00011f b7e8      	IN   R30,0x38
000120 68e0      	ORI  R30,0x80
000121 bfe8      	OUT  0x38,R30
                 ; 0000 00C7            }
                 ; 0000 00C8 }
                 _0x11:
000122 9508      	RET
                 ; .FEND
                 ;
                 ;void WD()
                 ; 0000 00CB {
                 _WD:
                 ; .FSTART _WD
                 ; 0000 00CC  #asm("cli")
000123 94f8      	cli
                 ; 0000 00CD  #asm("wdr")
000124 95a8      	wdr
                 ; 0000 00CE  WDTCSR |= (1<<WDCE) | (1<<WDE);
000125 b5e1      	IN   R30,0x21
000126 61e8      	ORI  R30,LOW(0x18)
000127 bde1      	OUT  0x21,R30
                 ; 0000 00CF  WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
000128 e0ed      	LDI  R30,LOW(13)
000129 bde1      	OUT  0x21,R30
                 ; 0000 00D0  #asm("sei")
00012a 9478      	sei
                 ; 0000 00D1 }
00012b 9508      	RET
                 ; .FEND
                 ;
                 ;void main()
                 ; 0000 00D4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00D5  static unsigned int
                 ; 0000 00D6  dat;
                 ; 0000 00D7 
                 ; 0000 00D8  initdev();
00012c df2a      	RCALL _initdev
                 ; 0000 00D9  WD();
00012d dff5      	RCALL _WD
                 ; 0000 00DA   #asm ("sei")
00012e 9478      	sei
                 ; 0000 00DB 
                 ; 0000 00DC    while (1)
                 _0x16:
                 ; 0000 00DD   {
                 ; 0000 00DE     chk_OVF_T1();
00012f dfea      	RCALL _chk_OVF_T1
                 ; 0000 00DF     #asm("wdr")
000130 95a8      	wdr
                 ; 0000 00E0 
                 ; 0000 00E1       if(start)
000131 9b98      	SBIS 0x13,0
000132 c017      	RJMP _0x19
                 ; 0000 00E2         {
                 ; 0000 00E3             if(refresh)
000133 9b9a      	SBIS 0x13,2
000134 c014      	RJMP _0x1A
                 ; 0000 00E4               {
                 ; 0000 00E5                dat=conv(data);
000135 91a0 009b 	LDS  R26,_data
000137 91b0 009c 	LDS  R27,_data+1
000139 df56      	RCALL _conv
00013a 93e0 009f 	STS  _dat_S0000006000,R30
00013c 93f0 00a0 	STS  _dat_S0000006000+1,R31
                 ; 0000 00E6                PrepareData(dat);
00013e 91a0 009f 	LDS  R26,_dat_S0000006000
000140 91b0 00a0 	LDS  R27,_dat_S0000006000+1
000142 df7e      	RCALL _PrepareData
                 ; 0000 00E7                refresh=0;
000143 989a      	CBI  0x13,2
                 ; 0000 00E8                GIMSK|=(1<<INT0);
000144 b7eb      	IN   R30,0x3B
000145 64e0      	ORI  R30,0x40
000146 bfeb      	OUT  0x3B,R30
                 ; 0000 00E9                START_TIMER;
000147 e0e2      	LDI  R30,LOW(2)
000148 bdee      	OUT  0x2E,R30
                 ; 0000 00EA                }
                 ; 0000 00EB 
                 ; 0000 00EC          RefreshDisplay();
                 _0x1A:
000149 c019      	RJMP _0x3D
                 ; 0000 00ED           }
                 ; 0000 00EE       else
                 _0x19:
                 ; 0000 00EF         {
                 ; 0000 00F0            if(refresh)
00014a 9b9a      	SBIS 0x13,2
00014b c00b      	RJMP _0x1E
                 ; 0000 00F1             {
                 ; 0000 00F2               led_l++;
00014c 9433      	INC  R3
                 ; 0000 00F3 
                 ; 0000 00F4                  if(led_l>6)
00014d e0e6      	LDI  R30,LOW(6)
00014e 15e3      	CP   R30,R3
00014f f430      	BRSH _0x1F
                 ; 0000 00F5                    {
                 ; 0000 00F6                     led_h++;
000150 9423      	INC  R2
                 ; 0000 00F7                     led_l=6;
000151 2e3e      	MOV  R3,R30
                 ; 0000 00F8 
                 ; 0000 00F9                       if(led_h>6)
000152 15e2      	CP   R30,R2
000153 f410      	BRSH _0x20
                 ; 0000 00FA                       {
                 ; 0000 00FB                        led_l=0;
000154 2433      	CLR  R3
                 ; 0000 00FC                        led_h=0;
000155 2422      	CLR  R2
                 ; 0000 00FD                       }
                 ; 0000 00FE 
                 ; 0000 00FF                    }
                 _0x20:
                 ; 0000 0100               refresh=0;
                 _0x1F:
000156 989a      	CBI  0x13,2
                 ; 0000 0101                       }
                 ; 0000 0102          number[0]=12;
                 _0x1E:
000157 e0ec      	LDI  R30,LOW(12)
000158 93e0 0097 	STS  _number,R30
                 ; 0000 0103          number[1]=13;
00015a e0ed      	LDI  R30,LOW(13)
                +
00015b 93e0 0098+STS _number + ( 1 ) , R30
                 	__PUTB1MN _number,1
                 ; 0000 0104          number[2]=14;
00015d e0ee      	LDI  R30,LOW(14)
                +
00015e 93e0 0099+STS _number + ( 2 ) , R30
                 	__PUTB1MN _number,2
                 ; 0000 0105          number[3]=15;
000160 e0ef      	LDI  R30,LOW(15)
                +
000161 93e0 009a+STS _number + ( 3 ) , R30
                 	__PUTB1MN _number,3
                 ; 0000 0106          RefreshDisplay();
                 _0x3D:
000163 df05      	RCALL _RefreshDisplay
                 ; 0000 0107            }
                 ; 0000 0108              }
000164 cfca      	RJMP _0x16
                 ; 0000 0109                }
                 _0x23:
000165 cfff      	RJMP _0x23
                 ; .FEND
                 ;
                 ;
                 ;interrupt [EXT_INT0] void int0(void)
                 ; 0000 010D {
                 _int0:
                 ; .FSTART _int0
000166 920a      	ST   -Y,R0
000167 921a      	ST   -Y,R1
000168 92fa      	ST   -Y,R15
000169 936a      	ST   -Y,R22
00016a 937a      	ST   -Y,R23
00016b 938a      	ST   -Y,R24
00016c 939a      	ST   -Y,R25
00016d 93aa      	ST   -Y,R26
00016e 93ba      	ST   -Y,R27
00016f 93ea      	ST   -Y,R30
000170 93fa      	ST   -Y,R31
000171 b7ef      	IN   R30,SREG
000172 93ea      	ST   -Y,R30
                 ; 0000 010E  static unsigned char
                 ; 0000 010F  cnt=0;
                 ; 0000 0110 
                 ; 0000 0111  static unsigned int
                 ; 0000 0112  len[2]={0};
                 ; 0000 0113 
                 ; 0000 0114  chk_OVF_T1();
000173 dfa6      	RCALL _chk_OVF_T1
                 ; 0000 0115 
                 ; 0000 0116   if(!process)
000174 9999      	SBIC 0x13,1
000175 c007      	RJMP _0x24
                 ; 0000 0117     {
                 ; 0000 0118     START_TIMER;
000176 e0e2      	LDI  R30,LOW(2)
000177 bdee      	OUT  0x2E,R30
                 ; 0000 0119     CLR_TIMER_RPM;
000178 e0e0      	LDI  R30,LOW(0)
000179 bded      	OUT  0x2D,R30
00017a bdec      	OUT  0x2C,R30
                 ; 0000 011A     process=1;
00017b 9a99      	SBI  0x13,1
                 ; 0000 011B        }
                 ; 0000 011C  else
00017c c050      	RJMP _0x27
                 _0x24:
                 ; 0000 011D     {
                 ; 0000 011E      switch(cnt)
00017d 91e0 00a1 	LDS  R30,_cnt_S0000007000
00017f e0f0      	LDI  R31,0
                 ; 0000 011F            {
                 ; 0000 0120             case 0:
000180 9730      	SBIW R30,0
000181 f461      	BRNE _0x2B
                 ; 0000 0121             STOP_TIMER;
000182 d09b      	RCALL SUBOPT_0x6
                 ; 0000 0122             len[0]=TIMER;
000183 93e0 00a2 	STS  _len_S0000007000,R30
000185 93f0 00a3 	STS  _len_S0000007000+1,R31
                 ; 0000 0123             process=0;
000187 9899      	CBI  0x13,1
                 ; 0000 0124             cnt++;
000188 91e0 00a1 	LDS  R30,_cnt_S0000007000
00018a 5fef      	SUBI R30,-LOW(1)
00018b 93e0 00a1 	STS  _cnt_S0000007000,R30
                 ; 0000 0125             break;
00018d c01c      	RJMP _0x2A
                 ; 0000 0126 
                 ; 0000 0127             case 1:
                 _0x2B:
00018e 30e1      	CPI  R30,LOW(0x1)
00018f e0a0      	LDI  R26,HIGH(0x1)
000190 07fa      	CPC  R31,R26
000191 f4c1      	BRNE _0x35
                 ; 0000 0128             STOP_TIMER;
000192 d08b      	RCALL SUBOPT_0x6
                 ; 0000 0129             len[1]=TIMER;
                +
000193 93e0 00a4+STS _len_S0000007000 + ( 2 ) , R30
000195 93f0 00a5+STS _len_S0000007000 + ( 2 ) + 1 , R31
                 	__PUTW1MN _len_S0000007000,2
                 ; 0000 012A             if((len[1] < (len[0]+300)) && (len[1] > (len[0]-300)))
000197 d091      	RCALL SUBOPT_0x7
000198 5de4      	SUBI R30,LOW(-300)
000199 4ffe      	SBCI R31,HIGH(-300)
00019a 17ae      	CP   R26,R30
00019b 07bf      	CPC  R27,R31
00019c f430      	BRSH _0x30
00019d d08b      	RCALL SUBOPT_0x7
00019e 52ec      	SUBI R30,LOW(300)
00019f 40f1      	SBCI R31,HIGH(300)
0001a0 17ea      	CP   R30,R26
0001a1 07fb      	CPC  R31,R27
0001a2 f008      	BRLO _0x31
                 _0x30:
0001a3 c002      	RJMP _0x2F
                 _0x31:
                 ; 0000 012B               {
                 ; 0000 012C                cnt=10;
0001a4 e0ea      	LDI  R30,LOW(10)
0001a5 c001      	RJMP _0x3E
                 ; 0000 012D                 }
                 ; 0000 012E             else
                 _0x2F:
                 ; 0000 012F               {
                 ; 0000 0130                cnt=0;
0001a6 e0e0      	LDI  R30,LOW(0)
                 _0x3E:
0001a7 93e0 00a1 	STS  _cnt_S0000007000,R30
                 ; 0000 0131                 }
                 ; 0000 0132             process=0;
0001a9 9899      	CBI  0x13,1
                 ; 0000 0133             break;
                 ; 0000 0134 
                 ; 0000 0135             default:break;
                 _0x35:
                 ; 0000 0136                 }
                 _0x2A:
                 ; 0000 0137 
                 ; 0000 0138      if(cnt==10)
0001aa 91a0 00a1 	LDS  R26,_cnt_S0000007000
0001ac 30aa      	CPI  R26,LOW(0xA)
0001ad f4f9      	BRNE _0x36
                 ; 0000 0139        {
                 ; 0000 013A         data=((long)len[0]+(long)len[1])/2;
0001ae 91a0 00a2 	LDS  R26,_len_S0000007000
0001b0 91b0 00a3 	LDS  R27,_len_S0000007000+1
0001b2 2788      	CLR  R24
0001b3 2799      	CLR  R25
                +
0001b4 91e0 00a4+LDS R30 , _len_S0000007000 + ( 2 )
0001b6 91f0 00a5+LDS R31 , _len_S0000007000 + ( 2 ) + 1
                 	__GETW1MN _len_S0000007000,2
0001b8 2766      	CLR  R22
0001b9 2777      	CLR  R23
0001ba d182      	RCALL __ADDD21
                +
0001bb e0e2     +LDI R30 , LOW ( 0x2 )
0001bc e0f0     +LDI R31 , HIGH ( 0x2 )
0001bd e060     +LDI R22 , BYTE3 ( 0x2 )
0001be e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
0001bf d1f1      	RCALL __DIVD21
0001c0 93e0 009b 	STS  _data,R30
0001c2 93f0 009c 	STS  _data+1,R31
0001c4 9360 009d 	STS  _data+2,R22
0001c6 9370 009e 	STS  _data+3,R23
                 ; 0000 013B         cnt=0;
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 93e0 00a1 	STS  _cnt_S0000007000,R30
                 ; 0000 013C         start=1;
0001cb 9a98      	SBI  0x13,0
                 ; 0000 013D         GIMSK=0x00;
0001cc bfeb      	OUT  0x3B,R30
                 ; 0000 013E           }
                 ; 0000 013F         }
                 _0x36:
                 _0x27:
                 ; 0000 0140 }
0001cd 91e9      	LD   R30,Y+
0001ce bfef      	OUT  SREG,R30
0001cf 91f9      	LD   R31,Y+
0001d0 91e9      	LD   R30,Y+
0001d1 91b9      	LD   R27,Y+
0001d2 91a9      	LD   R26,Y+
0001d3 9199      	LD   R25,Y+
0001d4 9189      	LD   R24,Y+
0001d5 9179      	LD   R23,Y+
0001d6 9169      	LD   R22,Y+
0001d7 90f9      	LD   R15,Y+
0001d8 9019      	LD   R1,Y+
0001d9 9009      	LD   R0,Y+
0001da 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_OVF(void)
                 ; 0000 0143 {
                 _timer0_OVF:
                 ; .FSTART _timer0_OVF
0001db 93aa      	ST   -Y,R26
0001dc 93ea      	ST   -Y,R30
0001dd b7ef      	IN   R30,SREG
0001de 93ea      	ST   -Y,R30
                 ; 0000 0144  static unsigned char
                 ; 0000 0145  time,t;
                 ; 0000 0146 
                 ; 0000 0147  time++;
0001df 91e0 00a6 	LDS  R30,_time_S0000008000
0001e1 5fef      	SUBI R30,-LOW(1)
0001e2 93e0 00a6 	STS  _time_S0000008000,R30
                 ; 0000 0148    //Задержка в полсекунды
                 ; 0000 0149    if(time>250)
0001e4 91a0 00a6 	LDS  R26,_time_S0000008000
0001e6 3fab      	CPI  R26,LOW(0xFB)
0001e7 f080      	BRLO _0x39
                 ; 0000 014A      {
                 ; 0000 014B       time=0;
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 93e0 00a6 	STS  _time_S0000008000,R30
                 ; 0000 014C       t++;
0001eb 91e0 00a7 	LDS  R30,_t_S0000008000
0001ed 5fef      	SUBI R30,-LOW(1)
0001ee 93e0 00a7 	STS  _t_S0000008000,R30
                 ; 0000 014D          if(t==16)
0001f0 91a0 00a7 	LDS  R26,_t_S0000008000
0001f2 31a0      	CPI  R26,LOW(0x10)
0001f3 f421      	BRNE _0x3A
                 ; 0000 014E            {
                 ; 0000 014F             refresh=1;
0001f4 9a9a      	SBI  0x13,2
                 ; 0000 0150             t=0;
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 93e0 00a7 	STS  _t_S0000008000,R30
                 ; 0000 0151            }
                 ; 0000 0152        }
                 _0x3A:
                 ; 0000 0153 }
                 _0x39:
0001f8 91e9      	LD   R30,Y+
0001f9 bfef      	OUT  SREG,R30
0001fa 91e9      	LD   R30,Y+
0001fb 91a9      	LD   R26,Y+
0001fc 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _ch:
000080           	.BYTE 0x10
                 _leds:
000090           	.BYTE 0x7
                 _number:
000097           	.BYTE 0x4
                 _data:
00009b           	.BYTE 0x4
                 _dat_S0000006000:
00009f           	.BYTE 0x2
                 _cnt_S0000007000:
0000a1           	.BYTE 0x1
                 _len_S0000007000:
0000a2           	.BYTE 0x4
                 _time_S0000008000:
0000a6           	.BYTE 0x1
                 _t_S0000008000:
0000a7           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
                +
0001fd e980     +LDI R24 , LOW ( 400 )
0001fe e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0001ff 9701     +SBIW R24 , 1
000200 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000201 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000202 58e0      	SUBI R30,-LOW(_ch)
000203 81e0      	LD   R30,Z
000204 bbe8      	OUT  0x18,R30
000205 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
000206 d0f1      	RCALL __DIVF21
                +
000207 83ea     +STD Y + 2 , R30
000208 83fb     +STD Y + 2 + 1 , R31
000209 836c     +STD Y + 2 + 2 , R22
00020a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
00020b 81aa     +LDD R26 , Y + 2
00020c 81bb     +LDD R27 , Y + 2 + 1
00020d 818c     +LDD R24 , Y + 2 + 2
00020e 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00020f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000210 81ac      	LDD  R26,Y+4
000211 81bd      	LDD  R27,Y+4+1
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000213 dffc      	RCALL SUBOPT_0x3
000214 efe4      	LDI  R30,LOW(500)
000215 e0f1      	LDI  R31,HIGH(500)
000216 d15d      	RCALL __DIVW21U
000217 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000218 e0ea      	LDI  R30,LOW(10)
000219 93e0 0097 	STS  _number,R30
                +
00021b 93e0 0098+STS _number + ( 1 ) , R30
                 	__PUTB1MN _number,1
00021d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
00021e e0e0      	LDI  R30,LOW(0)
00021f bdee      	OUT  0x2E,R30
000220 b5ec      	IN   R30,0x2C
000221 e0f0      	LDI  R31,0
000222 01df      	MOVW R26,R30
000223 b5ed      	IN   R30,0x2D
000224 2ffe      	MOV  R31,R30
000225 e0e0      	LDI  R30,0
000226 0fea      	ADD  R30,R26
000227 1ffb      	ADC  R31,R27
000228 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
                +
000229 91a0 00a4+LDS R26 , _len_S0000007000 + ( 2 )
00022b 91b0 00a5+LDS R27 , _len_S0000007000 + ( 2 ) + 1
                 	__GETW2MN _len_S0000007000,2
00022d 91e0 00a2 	LDS  R30,_len_S0000007000
00022f 91f0 00a3 	LDS  R31,_len_S0000007000+1
000231 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
000232 2355      	TST  R21
000233 f442      	BRPL __REPACK
000234 3850      	CPI  R21,0x80
000235 f411      	BRNE __ROUND_REPACK0
000236 ffe0      	SBRS R30,0
000237 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000238 9631      	ADIW R30,1
000239 1f69      	ADC  R22,R25
00023a 1f79      	ADC  R23,R25
00023b f06b      	BRVS __REPACK1
                 
                 __REPACK:
00023c e850      	LDI  R21,0x80
00023d 2757      	EOR  R21,R23
00023e f411      	BRNE __REPACK0
00023f 935f      	PUSH R21
000240 c073      	RJMP __ZERORES
                 __REPACK0:
000241 3f5f      	CPI  R21,0xFF
000242 f031      	BREQ __REPACK1
000243 0f66      	LSL  R22
000244 0c00      	LSL  R0
000245 9557      	ROR  R21
000246 9567      	ROR  R22
000247 2f75      	MOV  R23,R21
000248 9508      	RET
                 __REPACK1:
000249 935f      	PUSH R21
00024a 2000      	TST  R0
00024b f00a      	BRMI __REPACK2
00024c c073      	RJMP __MAXRES
                 __REPACK2:
00024d c06c      	RJMP __MINRES
                 
                 __UNPACK:
00024e e850      	LDI  R21,0x80
00024f 2e19      	MOV  R1,R25
000250 2215      	AND  R1,R21
000251 0f88      	LSL  R24
000252 1f99      	ROL  R25
000253 2795      	EOR  R25,R21
000254 0f55      	LSL  R21
000255 9587      	ROR  R24
                 
                 __UNPACK1:
000256 e850      	LDI  R21,0x80
000257 2e07      	MOV  R0,R23
000258 2205      	AND  R0,R21
000259 0f66      	LSL  R22
00025a 1f77      	ROL  R23
00025b 2775      	EOR  R23,R21
00025c 0f55      	LSL  R21
00025d 9567      	ROR  R22
00025e 9508      	RET
                 
                 __CFD1U:
00025f 9468      	SET
000260 c001      	RJMP __CFD1U0
                 __CFD1:
000261 94e8      	CLT
                 __CFD1U0:
000262 935f      	PUSH R21
000263 dff2      	RCALL __UNPACK1
000264 3870      	CPI  R23,0x80
000265 f018      	BRLO __CFD10
000266 3f7f      	CPI  R23,0xFF
000267 f408      	BRCC __CFD10
000268 c04b      	RJMP __ZERORES
                 __CFD10:
000269 e156      	LDI  R21,22
00026a 1b57      	SUB  R21,R23
00026b f4aa      	BRPL __CFD11
00026c 9551      	NEG  R21
00026d 3058      	CPI  R21,8
00026e f40e      	BRTC __CFD19
00026f 3059      	CPI  R21,9
                 __CFD19:
000270 f030      	BRLO __CFD17
000271 efef      	SER  R30
000272 efff      	SER  R31
000273 ef6f      	SER  R22
000274 e77f      	LDI  R23,0x7F
000275 f977      	BLD  R23,7
000276 c01a      	RJMP __CFD15
                 __CFD17:
000277 2777      	CLR  R23
000278 2355      	TST  R21
000279 f0b9      	BREQ __CFD15
                 __CFD18:
00027a 0fee      	LSL  R30
00027b 1fff      	ROL  R31
00027c 1f66      	ROL  R22
00027d 1f77      	ROL  R23
00027e 955a      	DEC  R21
00027f f7d1      	BRNE __CFD18
000280 c010      	RJMP __CFD15
                 __CFD11:
000281 2777      	CLR  R23
                 __CFD12:
000282 3058      	CPI  R21,8
000283 f028      	BRLO __CFD13
000284 2fef      	MOV  R30,R31
000285 2ff6      	MOV  R31,R22
000286 2f67      	MOV  R22,R23
000287 5058      	SUBI R21,8
000288 cff9      	RJMP __CFD12
                 __CFD13:
000289 2355      	TST  R21
00028a f031      	BREQ __CFD15
                 __CFD14:
00028b 9576      	LSR  R23
00028c 9567      	ROR  R22
00028d 95f7      	ROR  R31
00028e 95e7      	ROR  R30
00028f 955a      	DEC  R21
000290 f7d1      	BRNE __CFD14
                 __CFD15:
000291 2000      	TST  R0
000292 f40a      	BRPL __CFD16
000293 d0b2      	RCALL __ANEGD1
                 __CFD16:
000294 915f      	POP  R21
000295 9508      	RET
                 
                 __CDF1U:
000296 9468      	SET
000297 c001      	RJMP __CDF1U0
                 __CDF1:
000298 94e8      	CLT
                 __CDF1U0:
000299 9730      	SBIW R30,0
00029a 4060      	SBCI R22,0
00029b 4070      	SBCI R23,0
00029c f0b1      	BREQ __CDF10
00029d 2400      	CLR  R0
00029e f026      	BRTS __CDF11
00029f 2377      	TST  R23
0002a0 f412      	BRPL __CDF11
0002a1 9400      	COM  R0
0002a2 d0a3      	RCALL __ANEGD1
                 __CDF11:
0002a3 2e17      	MOV  R1,R23
0002a4 e17e      	LDI  R23,30
0002a5 2011      	TST  R1
                 __CDF12:
0002a6 f032      	BRMI __CDF13
0002a7 957a      	DEC  R23
0002a8 0fee      	LSL  R30
0002a9 1fff      	ROL  R31
0002aa 1f66      	ROL  R22
0002ab 1c11      	ROL  R1
0002ac cff9      	RJMP __CDF12
                 __CDF13:
0002ad 2fef      	MOV  R30,R31
0002ae 2ff6      	MOV  R31,R22
0002af 2d61      	MOV  R22,R1
0002b0 935f      	PUSH R21
0002b1 df8a      	RCALL __REPACK
0002b2 915f      	POP  R21
                 __CDF10:
0002b3 9508      	RET
                 
                 __ZERORES:
0002b4 27ee      	CLR  R30
0002b5 27ff      	CLR  R31
0002b6 2766      	CLR  R22
0002b7 2777      	CLR  R23
0002b8 915f      	POP  R21
0002b9 9508      	RET
                 
                 __MINRES:
0002ba efef      	SER  R30
0002bb efff      	SER  R31
0002bc e76f      	LDI  R22,0x7F
0002bd ef7f      	SER  R23
0002be 915f      	POP  R21
0002bf 9508      	RET
                 
                 __MAXRES:
0002c0 efef      	SER  R30
0002c1 efff      	SER  R31
0002c2 e76f      	LDI  R22,0x7F
0002c3 e77f      	LDI  R23,0x7F
0002c4 915f      	POP  R21
0002c5 9508      	RET
                 
                 __MULF12:
0002c6 935f      	PUSH R21
0002c7 df86      	RCALL __UNPACK
0002c8 3870      	CPI  R23,0x80
0002c9 f351      	BREQ __ZERORES
0002ca 3890      	CPI  R25,0x80
0002cb f341      	BREQ __ZERORES
0002cc 2401      	EOR  R0,R1
0002cd 9408      	SEC
0002ce 1f79      	ADC  R23,R25
0002cf f423      	BRVC __MULF124
0002d0 f31c      	BRLT __ZERORES
                 __MULF125:
0002d1 2000      	TST  R0
0002d2 f33a      	BRMI __MINRES
0002d3 cfec      	RJMP __MAXRES
                 __MULF124:
0002d4 933f      	PUSH R19
0002d5 934f      	PUSH R20
0002d6 2411      	CLR  R1
0002d7 2733      	CLR  R19
0002d8 2744      	CLR  R20
0002d9 2755      	CLR  R21
0002da e198      	LDI  R25,24
                 __MULF120:
0002db 0f33      	LSL  R19
0002dc 1f44      	ROL  R20
0002dd 1f55      	ROL  R21
0002de 1fee      	ROL  R30
0002df 1fff      	ROL  R31
0002e0 1f66      	ROL  R22
0002e1 f430      	BRCC __MULF121
0002e2 0f3a      	ADD  R19,R26
0002e3 1f4b      	ADC  R20,R27
0002e4 1f58      	ADC  R21,R24
0002e5 1de1      	ADC  R30,R1
0002e6 1df1      	ADC  R31,R1
0002e7 1d61      	ADC  R22,R1
                 __MULF121:
0002e8 959a      	DEC  R25
0002e9 f789      	BRNE __MULF120
0002ea 914f      	POP  R20
0002eb 913f      	POP  R19
0002ec 2366      	TST  R22
0002ed f02a      	BRMI __MULF122
0002ee 0f55      	LSL  R21
0002ef 1fee      	ROL  R30
0002f0 1fff      	ROL  R31
0002f1 1f66      	ROL  R22
0002f2 c002      	RJMP __MULF123
                 __MULF122:
0002f3 9573      	INC  R23
0002f4 f2e3      	BRVS __MULF125
                 __MULF123:
0002f5 df3c      	RCALL __ROUND_REPACK
0002f6 915f      	POP  R21
0002f7 9508      	RET
                 
                 __DIVF21:
0002f8 935f      	PUSH R21
0002f9 df54      	RCALL __UNPACK
0002fa 3870      	CPI  R23,0x80
0002fb f421      	BRNE __DIVF210
0002fc 2011      	TST  R1
                 __DIVF211:
0002fd f40a      	BRPL __DIVF219
0002fe cfbb      	RJMP __MINRES
                 __DIVF219:
0002ff cfc0      	RJMP __MAXRES
                 __DIVF210:
000300 3890      	CPI  R25,0x80
000301 f409      	BRNE __DIVF218
                 __DIVF217:
000302 cfb1      	RJMP __ZERORES
                 __DIVF218:
000303 2401      	EOR  R0,R1
000304 9408      	SEC
000305 0b97      	SBC  R25,R23
000306 f41b      	BRVC __DIVF216
000307 f3d4      	BRLT __DIVF217
000308 2000      	TST  R0
000309 cff3      	RJMP __DIVF211
                 __DIVF216:
00030a 2f79      	MOV  R23,R25
00030b 931f      	PUSH R17
00030c 932f      	PUSH R18
00030d 933f      	PUSH R19
00030e 934f      	PUSH R20
00030f 2411      	CLR  R1
000310 2711      	CLR  R17
000311 2722      	CLR  R18
000312 2733      	CLR  R19
000313 2744      	CLR  R20
000314 2755      	CLR  R21
000315 e290      	LDI  R25,32
                 __DIVF212:
000316 17ae      	CP   R26,R30
000317 07bf      	CPC  R27,R31
000318 0786      	CPC  R24,R22
000319 0741      	CPC  R20,R17
00031a f030      	BRLO __DIVF213
00031b 1bae      	SUB  R26,R30
00031c 0bbf      	SBC  R27,R31
00031d 0b86      	SBC  R24,R22
00031e 0b41      	SBC  R20,R17
00031f 9408      	SEC
000320 c001      	RJMP __DIVF214
                 __DIVF213:
000321 9488      	CLC
                 __DIVF214:
000322 1f55      	ROL  R21
000323 1f22      	ROL  R18
000324 1f33      	ROL  R19
000325 1c11      	ROL  R1
000326 1faa      	ROL  R26
000327 1fbb      	ROL  R27
000328 1f88      	ROL  R24
000329 1f44      	ROL  R20
00032a 959a      	DEC  R25
00032b f751      	BRNE __DIVF212
00032c 01f9      	MOVW R30,R18
00032d 2d61      	MOV  R22,R1
00032e 914f      	POP  R20
00032f 913f      	POP  R19
000330 912f      	POP  R18
000331 911f      	POP  R17
000332 2366      	TST  R22
000333 f032      	BRMI __DIVF215
000334 0f55      	LSL  R21
000335 1fee      	ROL  R30
000336 1fff      	ROL  R31
000337 1f66      	ROL  R22
000338 957a      	DEC  R23
000339 f243      	BRVS __DIVF217
                 __DIVF215:
00033a def7      	RCALL __ROUND_REPACK
00033b 915f      	POP  R21
00033c 9508      	RET
                 
                 __ADDD21:
00033d 0fae      	ADD  R26,R30
00033e 1fbf      	ADC  R27,R31
00033f 1f86      	ADC  R24,R22
000340 1f97      	ADC  R25,R23
000341 9508      	RET
                 
                 __ANEGW1:
000342 95f1      	NEG  R31
000343 95e1      	NEG  R30
000344 40f0      	SBCI R31,0
000345 9508      	RET
                 
                 __ANEGD1:
000346 95f0      	COM  R31
000347 9560      	COM  R22
000348 9570      	COM  R23
000349 95e1      	NEG  R30
00034a 4fff      	SBCI R31,-1
00034b 4f6f      	SBCI R22,-1
00034c 4f7f      	SBCI R23,-1
00034d 9508      	RET
                 
                 __CWD1:
00034e 2f6f      	MOV  R22,R31
00034f 0f66      	ADD  R22,R22
000350 0b66      	SBC  R22,R22
000351 2f76      	MOV  R23,R22
000352 9508      	RET
                 
                 __GEW12U:
000353 17ae      	CP   R26,R30
000354 07bf      	CPC  R27,R31
000355 e0e1      	LDI  R30,1
000356 f408      	BRSH __GEW12UT
000357 27ee      	CLR  R30
                 __GEW12UT:
000358 9508      	RET
                 
                 __LTW12U:
000359 17ae      	CP   R26,R30
00035a 07bf      	CPC  R27,R31
00035b e0e1      	LDI  R30,1
00035c f008      	BRLO __LTW12UT
00035d 27ee      	CLR  R30
                 __LTW12UT:
00035e 9508      	RET
                 
                 __MULW12U:
00035f 2e0a      	MOV  R0,R26
000360 2e1b      	MOV  R1,R27
000361 e181      	LDI  R24,17
000362 27aa      	CLR  R26
000363 1bbb      	SUB  R27,R27
000364 c005      	RJMP __MULW12U1
                 __MULW12U3:
000365 f410      	BRCC __MULW12U2
000366 0da0      	ADD  R26,R0
000367 1db1      	ADC  R27,R1
                 __MULW12U2:
000368 95b6      	LSR  R27
000369 95a7      	ROR  R26
                 __MULW12U1:
00036a 95f7      	ROR  R31
00036b 95e7      	ROR  R30
00036c 958a      	DEC  R24
00036d f7b9      	BRNE __MULW12U3
00036e 9508      	RET
                 
                 __MULW12:
00036f d049      	RCALL __CHKSIGNW
000370 dfee      	RCALL __MULW12U
000371 f40e      	BRTC __MULW121
000372 dfcf      	RCALL __ANEGW1
                 __MULW121:
000373 9508      	RET
                 
                 __DIVW21U:
000374 2400      	CLR  R0
000375 2411      	CLR  R1
000376 e190      	LDI  R25,16
                 __DIVW21U1:
000377 0faa      	LSL  R26
000378 1fbb      	ROL  R27
000379 1c00      	ROL  R0
00037a 1c11      	ROL  R1
00037b 1a0e      	SUB  R0,R30
00037c 0a1f      	SBC  R1,R31
00037d f418      	BRCC __DIVW21U2
00037e 0e0e      	ADD  R0,R30
00037f 1e1f      	ADC  R1,R31
000380 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000381 60a1      	SBR  R26,1
                 __DIVW21U3:
000382 959a      	DEC  R25
000383 f799      	BRNE __DIVW21U1
000384 01fd      	MOVW R30,R26
000385 01d0      	MOVW R26,R0
000386 9508      	RET
                 
                 __DIVW21:
000387 d031      	RCALL __CHKSIGNW
000388 dfeb      	RCALL __DIVW21U
000389 f40e      	BRTC __DIVW211
00038a dfb7      	RCALL __ANEGW1
                 __DIVW211:
00038b 9508      	RET
                 
                 __DIVD21U:
00038c 933f      	PUSH R19
00038d 934f      	PUSH R20
00038e 935f      	PUSH R21
00038f 2400      	CLR  R0
000390 2411      	CLR  R1
000391 2744      	CLR  R20
000392 2755      	CLR  R21
000393 e230      	LDI  R19,32
                 __DIVD21U1:
000394 0faa      	LSL  R26
000395 1fbb      	ROL  R27
000396 1f88      	ROL  R24
000397 1f99      	ROL  R25
000398 1c00      	ROL  R0
000399 1c11      	ROL  R1
00039a 1f44      	ROL  R20
00039b 1f55      	ROL  R21
00039c 1a0e      	SUB  R0,R30
00039d 0a1f      	SBC  R1,R31
00039e 0b46      	SBC  R20,R22
00039f 0b57      	SBC  R21,R23
0003a0 f428      	BRCC __DIVD21U2
0003a1 0e0e      	ADD  R0,R30
0003a2 1e1f      	ADC  R1,R31
0003a3 1f46      	ADC  R20,R22
0003a4 1f57      	ADC  R21,R23
0003a5 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003a6 60a1      	SBR  R26,1
                 __DIVD21U3:
0003a7 953a      	DEC  R19
0003a8 f759      	BRNE __DIVD21U1
0003a9 01fd      	MOVW R30,R26
0003aa 01bc      	MOVW R22,R24
0003ab 01d0      	MOVW R26,R0
0003ac 01ca      	MOVW R24,R20
0003ad 915f      	POP  R21
0003ae 914f      	POP  R20
0003af 913f      	POP  R19
0003b0 9508      	RET
                 
                 __DIVD21:
0003b1 d015      	RCALL __CHKSIGND
0003b2 dfd9      	RCALL __DIVD21U
0003b3 f40e      	BRTC __DIVD211
0003b4 df91      	RCALL __ANEGD1
                 __DIVD211:
0003b5 9508      	RET
                 
                 __MODW21U:
0003b6 dfbd      	RCALL __DIVW21U
0003b7 01fd      	MOVW R30,R26
0003b8 9508      	RET
                 
                 __CHKSIGNW:
0003b9 94e8      	CLT
0003ba fff7      	SBRS R31,7
0003bb c002      	RJMP __CHKSW1
0003bc df85      	RCALL __ANEGW1
0003bd 9468      	SET
                 __CHKSW1:
0003be ffb7      	SBRS R27,7
0003bf c006      	RJMP __CHKSW2
0003c0 95a0      	COM  R26
0003c1 95b0      	COM  R27
0003c2 9611      	ADIW R26,1
0003c3 f800      	BLD  R0,0
0003c4 9403      	INC  R0
0003c5 fa00      	BST  R0,0
                 __CHKSW2:
0003c6 9508      	RET
                 
                 __CHKSIGND:
0003c7 94e8      	CLT
0003c8 ff77      	SBRS R23,7
0003c9 c002      	RJMP __CHKSD1
0003ca df7b      	RCALL __ANEGD1
0003cb 9468      	SET
                 __CHKSD1:
0003cc ff97      	SBRS R25,7
0003cd c00b      	RJMP __CHKSD2
0003ce 2400      	CLR  R0
0003cf 95a0      	COM  R26
0003d0 95b0      	COM  R27
0003d1 9580      	COM  R24
0003d2 9590      	COM  R25
0003d3 9611      	ADIW R26,1
0003d4 1d80      	ADC  R24,R0
0003d5 1d90      	ADC  R25,R0
0003d6 f800      	BLD  R0,0
0003d7 9403      	INC  R0
0003d8 fa00      	BST  R0,0
                 __CHKSD2:
0003d9 9508      	RET
                 
                 __SAVELOCR4:
0003da 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003db 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003dc 931a      	ST   -Y,R17
0003dd 930a      	ST   -Y,R16
0003de 9508      	RET
                 
                 __LOADLOCR4:
0003df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003e1 8119      	LDD  R17,Y+1
0003e2 8108      	LD   R16,Y
0003e3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :  42 r1 :  29 r2 :   6 r3 :   7 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  11 r17:  10 r18:   9 r19:  20 r20:  18 r21:  52 r22:  50 r23:  48 
r24:  28 r25:  28 r26:  66 r27:  35 r28:   4 r29:   0 r30: 214 r31:  70 
x  :   6 y  :  66 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :   9 
adiw  :   5 and   :   4 andi  :   0 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   2 brmi  :   5 brne  :  20 brpl  :   5 brsh  :   6 brtc  :   4 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   2 cbi   :  12 
cbr   :   1 clc   :   1 clh   :   0 cli   :   2 cln   :   0 clr   :  37 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 cp    :   7 
cpc   :  11 cpi   :  19 cpse  :   0 dec   :  11 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 
inc   :   5 ld    :  19 ldd   :  15 ldi   : 107 lds   :  23 lpm   :   7 
lsl   :  13 lsr   :   2 mov   :  25 movw  :  18 mul   :   0 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   3 out   :  33 
pop   :  16 push  :  15 rcall :  71 ret   :  40 reti  :   2 rjmp  :  63 
rol   :  37 ror   :  10 sbc   :   9 sbci  :   8 sbi   :   9 sbic  :   1 
sbis  :   3 sbiw  :   7 sbr   :   2 sbrc  :   0 sbrs  :   6 sec   :   3 
seh   :   0 sei   :   2 sen   :   0 ser   :   8 ses   :   0 set   :   4 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  27 std   :  12 
sts   :  25 sub   :   6 subi  :  10 swap  :   0 tst   :  12 wdr   :   3 

Instructions used: 71 out of 114 (62.3%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007c8   1950     42   1992    2048  97.3%
[.dseg] 0x000060 0x0000a8      0     40     40     128  31.3%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 3 warnings
